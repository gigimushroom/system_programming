// This file is part of the materials accompanying the book
// "The Elements of Computing Systems" by Nisan and Schocken,
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:

    // Set loading bits for 8 RAM64.
    // Only the selected register's load bit is 1.
    DMux8Way(in=load, sel=address[6..8],
            a=dmux1, b=dmux2, c=dmux3, d=dmux4,
            e=dmux5, f=dmux6, g=dmux7, h=dmux8);

    // Feed input to 8 registers, but only one of them
    // is set to load.
    RAM64(in=in, load=dmux1, address=address[0..5], out=out1);
    RAM64(in=in, load=dmux2, address=address[0..5], out=out2);
    RAM64(in=in, load=dmux3, address=address[0..5], out=out3);
    RAM64(in=in, load=dmux4, address=address[0..5], out=out4);
    RAM64(in=in, load=dmux5, address=address[0..5], out=out5);
    RAM64(in=in, load=dmux6, address=address[0..5], out=out6);
    RAM64(in=in, load=dmux7, address=address[0..5], out=out7);
    RAM64(in=in, load=dmux8, address=address[0..5], out=out8);

    // Select the right register to get output.
    Mux8Way16(a=out1, b=out2, c=out3, d=out4,
              e=out5, f=out6, g=out7, h=out8,
              sel=address[6..8], out=out);
}
