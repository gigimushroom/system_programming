
class World {
  field Array _world;

  constructor World new() {
    var int i;

    let _world = Array.new(512);
    let i = 0;
    while (i < 512) {
      let _world[i] = 0;
      let i = i + 1;
    }

    return this;
  }

  /** Set up the game by drawing some patterns on screen. */
  method void setup_game() {
    // Blinker
    do set_pattern(2);
    do set_pattern(34);
    do set_pattern(66);

    // Beacon
    do draw_beacon(412);
    do draw_beacon(384);

    // Glider
    do draw_glider(54);
    
    // Pentadecathlon
    do draw_penta(112);

    // Toad
    do draw_toad(198);

    return;
  }

  method boolean is_filled(int i) {
    return _world[i];
  }

  /** Check the cell is filled or empty. */
  method int _count_as_life_if_filled(int c, int r, int lives) {
    var int index;
    let index = Lib.find_index_from_cell(c, r);

    if (index = -1) {
      return lives;
    }

    if (is_filled(index)) {
      let lives = lives + 1;
    }
    return lives;
  }

  /** Count how many neighbours of the cell are filled. */
  method int count_neighbors_lives_from_cell(int col, int row) {
    var int x, y, c, r;
    var int lives;

    let lives = 0;
    let x = col;
    let y = row;

    // Each cell has 8 neighbours. 
    // Due to JACK lanuage is limited, we cannot construct an array
    // of tuples, so I listed 8 cases.

    let c = x-1;
    let r = y-1;
    let lives = _count_as_life_if_filled(c, r, lives);

    let c = x;
    let r = y-1;
    let lives = _count_as_life_if_filled(c, r, lives);

    let c = x+1;
    let r = y-1;
    let lives = _count_as_life_if_filled(c, r, lives);

    let c = x-1;
    let r = y;
    let lives = _count_as_life_if_filled(c, r, lives);

    let c = x+1;
    let r = y;
    let lives = _count_as_life_if_filled(c, r, lives);

    let c = x-1;
    let r = y+1;
    let lives = _count_as_life_if_filled(c, r, lives);

    let c = x;
    let r = y+1;
    let lives = _count_as_life_if_filled(c, r, lives);

    let c = x+1;
    let r = y+1;
    let lives = _count_as_life_if_filled(c, r, lives);

    return lives;
  }
  
  /** Iterate the 512 cells from world array, and draw a cell if filled. */
  method void draw_world() {
    var int i;
    var int x, y;

    let i = 0;
    while (i < 512) {
      if (_world[i] = 1) {
        // Find Cell position x, y from index.
        // x = index % 32, where 32 is the size of row.
        // y is index / 32.
        let x = Lib.math_mod(i, 32);
        let y = Math.divide(i, 32);

        do Display.DrawCell(x, y);
      }
      let i = i + 1;
    }

    return;
  }

  /** Calculate the new cell's state. */
  method int calc_new_cell_state(int index) {
    /*
    Any live cell with two or three live neighbors lives on to the next generation.
    Any empty cell with exactly three live neighbors becomes a live cell 
    in the next generation. All other cells are empty in the next generation.
    */
    var int lives;
    var int x, y;

    let x = Lib.math_mod(index, 32);
    let y = Math.divide(index, 32); 
    let lives = count_neighbors_lives_from_cell(x, y);

    if (is_filled(index)) {
      if ((lives = 3) | (lives = 2)) {
        return 1;
      }
    } else {
      if (lives = 3) {
        return 1;
      }
    }
    return 0;
  }

  /** Fill the corresponding cell. */
  method void set_pattern(int index) {
    let _world[index] = 1;
    return;
  }

  /** Draw patterns */
  method void draw_beacon(int pos) {
    let _world[pos] = 1;
    let _world[pos + 1] = 1;
    let _world[pos + 32] = 1;
    let _world[pos + 33] = 1;

    let _world[pos + 66] = 1;
    let _world[pos + 67] = 1;
    let _world[pos + 98] = 1;
    let _world[pos + 99] = 1;

    return;
  }

  method void draw_glider(int pos) {
    let _world[pos] = 1;
    let _world[pos + 33] = 1;
    let _world[pos + 63] = 1;
    let _world[pos + 64] = 1;
    let _world[pos + 65] = 1;
    return;
  }

  method void draw_penta(int pos) {
    let _world[pos] = 1;
    let _world[pos + 31] = 1;
    let _world[pos + 33] = 1;

    let _world[pos + 62] = 1;
    let _world[pos + 66] = 1;
    let _world[pos + 94] = 1;
    let _world[pos + 98] = 1;

    let _world[pos + 126] = 1;
    let _world[pos + 130] = 1;
    let _world[pos + 158] = 1;
    let _world[pos + 162] = 1;
    let _world[pos + 190] = 1;
    let _world[pos + 194] = 1;
    let _world[pos + 222] = 1;
    let _world[pos + 226] = 1;
    let _world[pos + 255] = 1;
    let _world[pos + 257] = 1;
    let _world[pos + 288] = 1;

    return;
  }

  method void draw_toad(int pos) {
    let _world[pos] = 1;
    let _world[pos + 1] = 1;
    let _world[pos + 2] = 1;
    let _world[pos + 31] = 1;
    let _world[pos + 32] = 1;
    let _world[pos + 33] = 1;

    return;
  } 

  /** Run the Game of Life simulation. */
  method void run() {
    var int index, i;
    var Array new_world;

    while (true) {
      do draw_world();

      let new_world = Array.new(512);
      let index = 0;
      while (index < 512) {
        let new_world[index] = calc_new_cell_state(index);
        let index = index + 1;
      }

      // deep copy
      let i = 0;
      while (i < 512) {
        let _world[i] = new_world[i];
        let i = i + 1;
      }
      do new_world.dispose();

      do Sys.wait(100);
      do Display.EmptyBoard();
    }

    return;
  }
}
