// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bits;

    /** Initializes the library. */
    function void init() {
        let bits = Array.new(16);
        // 1<<bit, where bit in [0, 15]
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        // If set to 32768 directly, we got Compiler error: Integer constant too big
        // Hack to use addition
        let bits[15] = 16384 + 16384;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return x * (-1);
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;
        var int bit;

        let sum = 0;
        let shiftedX = x;
        // 16 bit machine, max is 16.
        while (j < 16) {
            let bit = y & bits[j];
            // Check if j-th bit of y is 1.
            if (bit = bits[j]) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    function int divide_helper(int x, int y) {
        var int q;
        if (y > x) {
            return 0;
        } 

        let q = Math.divide(x, 2 * y);
        if ((x - ((q * y) + (q * y))) < y) {
            return (2 * q);
        }
        else {
            return 2 * q + 1;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int r;
        var boolean neg;

        let neg = false;
        if ((x < 0) & (y > 0)) {
            let x = Math.abs(x);
            let neg = true;
        }

        if ((y < 0) & (x > 0)) {
            let y = Math.abs(y);
            let neg = true;
        }
        if ((y < 0) & (x < 0)) {
            let y = Math.abs(y);
            let x = Math.abs(x);
        }

        let r = Math.divide_helper(x, y);

        if (r = 0) {
            return 0;
        }

        if (neg) {
            let r = r * (-1);
        }

        return r;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i;
        let i = 1;
        // while i * i <= x
        while (~((i * i) > x) & (i < 182)) {
            let i = i + 1;
        }
        return i - 1;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
