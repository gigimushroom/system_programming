// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1; 
        }
        let str = Memory.alloc(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    function int strToInt(int c) {
        if (c = 48) {
            return 0;
        }
        if (c = 49) {
            return 1;
        }
        if (c = 50) {
            return 2;
        }
        if (c = 51) {
            return 3;
        }
        if (c = 52) {
            return 4;
        }
        if (c = 53) {
            return 5;
        }
        if (c = 54) {
            return 6;
        }
        return 0;
    }
    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, d, i;
        var boolean neg;

        let neg = false;
        let i = 0;

        if (str[0] = 45) {
            let neg = true;
            let i = 1;
        }

        while (i < length) {
            let d = String.strToInt(str[i]);
            let val = (val * 10) + d;
            let i = i + 1;
        }

        if (neg) {
            let val = val * (-1);
        }
        return val;
    }

    function int math_mod(int c, int m) {
        var int result, d;

        if (c < m) {
            let result = c;
        } else {
            let d = c / m;
            let result = c - (d * m);
        }

        return result;
    }

    function int charToASCII(int c) {
        if (c = 0) {
            return 48;
        }
        if (c = 1) {
            return 49;
        }
        if (c = 2) {
            return 50;
        }
        if (c = 3) {
            return 51;
        }
        if (c = 4) {
            return 52;
        }
        if (c = 5) {
            return 53;
        }
        if (c = 6) {
            return 54;
        }
        if (c = 7) {
            return 55;
        }
        if (c = 8) {
            return 56;
        }
        if (c = 9) {
            return 57;
        }
        return 0;
    }

    method void int2String(int val) {
        var int last;
        var int c;

        let last = String.math_mod(val, 10);
        let c = String.charToASCII(last);

        if (val < 10) {
            do appendChar(c);
            return;
        }
        
        do int2String(val / 10);
        do appendChar(c);

        return;
    }
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int neg;

        let length = 0;

        if (val < 0) {
            let neg = 45;
            do appendChar(neg); // '-' in ASCII is 45
            let val = val * (-1);
        }

        do int2String(val);
        
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
